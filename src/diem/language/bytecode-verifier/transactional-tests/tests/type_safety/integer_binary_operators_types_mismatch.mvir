//# run

// tests multiple type mismatches for int operations
// !!!! generated file, do NOT edit manually !!!!

// operator +
main() {
    _ = 0u8 + 0u64;
    return;
}


//# run
main() {
    _ = 0u8 + 0u128;
    return;
}


//# run
main() {
    _ = 0u64 + 0u8;
    return;
}


//# run
main() {
    _ = 0u64 + 0u128;
    return;
}


//# run
main() {
    _ = 0u128 + 0u8;
    return;
}


//# run
main() {
    _ = 0u128 + 0u64;
    return;
}


//# run
main() {
    _ = 0 + true;
    return;
}


//# run
main() {
    _ = true + 0;
    return;
}


//# run
main() {
    _ = true + true;
    return;
}


//# run
main() {
    _ = 0 + 0x0;
    return;
}


//# run
main() {
    _ = 0x0 + 0;
    return;
}


//# run
main() {
    _ = 0x0 + 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 + (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) + 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) + (R { x: true });
        return;
    }
}



// operator -
//# run
main() {
    _ = 0u8 - 0u64;
    return;
}


//# run
main() {
    _ = 0u8 - 0u128;
    return;
}


//# run
main() {
    _ = 0u64 - 0u8;
    return;
}


//# run
main() {
    _ = 0u64 - 0u128;
    return;
}


//# run
main() {
    _ = 0u128 - 0u8;
    return;
}


//# run
main() {
    _ = 0u128 - 0u64;
    return;
}


//# run
main() {
    _ = 0 - true;
    return;
}


//# run
main() {
    _ = true - 0;
    return;
}


//# run
main() {
    _ = true - true;
    return;
}


//# run
main() {
    _ = 0 - 0x0;
    return;
}


//# run
main() {
    _ = 0x0 - 0;
    return;
}


//# run
main() {
    _ = 0x0 - 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 - (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) - 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) - (R { x: true });
        return;
    }
}



// operator *
//# run
main() {
    _ = 0u8 * 0u64;
    return;
}


//# run
main() {
    _ = 0u8 * 0u128;
    return;
}


//# run
main() {
    _ = 0u64 * 0u8;
    return;
}


//# run
main() {
    _ = 0u64 * 0u128;
    return;
}


//# run
main() {
    _ = 0u128 * 0u8;
    return;
}


//# run
main() {
    _ = 0u128 * 0u64;
    return;
}


//# run
main() {
    _ = 0 * true;
    return;
}


//# run
main() {
    _ = true * 0;
    return;
}


//# run
main() {
    _ = true * true;
    return;
}


//# run
main() {
    _ = 0 * 0x0;
    return;
}


//# run
main() {
    _ = 0x0 * 0;
    return;
}


//# run
main() {
    _ = 0x0 * 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 * (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) * 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) * (R { x: true });
        return;
    }
}



// operator /
//# run
main() {
    _ = 0u8 / 0u64;
    return;
}


//# run
main() {
    _ = 0u8 / 0u128;
    return;
}


//# run
main() {
    _ = 0u64 / 0u8;
    return;
}


//# run
main() {
    _ = 0u64 / 0u128;
    return;
}


//# run
main() {
    _ = 0u128 / 0u8;
    return;
}


//# run
main() {
    _ = 0u128 / 0u64;
    return;
}


//# run
main() {
    _ = 0 / true;
    return;
}


//# run
main() {
    _ = true / 0;
    return;
}


//# run
main() {
    _ = true / true;
    return;
}


//# run
main() {
    _ = 0 / 0x0;
    return;
}


//# run
main() {
    _ = 0x0 / 0;
    return;
}


//# run
main() {
    _ = 0x0 / 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 / (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) / 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) / (R { x: true });
        return;
    }
}



// operator &
//# run
main() {
    _ = 0u8 & 0u64;
    return;
}


//# run
main() {
    _ = 0u8 & 0u128;
    return;
}


//# run
main() {
    _ = 0u64 & 0u8;
    return;
}


//# run
main() {
    _ = 0u64 & 0u128;
    return;
}


//# run
main() {
    _ = 0u128 & 0u8;
    return;
}


//# run
main() {
    _ = 0u128 & 0u64;
    return;
}


//# run
main() {
    _ = 0 & true;
    return;
}


//# run
main() {
    _ = true & 0;
    return;
}


//# run
main() {
    _ = true & true;
    return;
}


//# run
main() {
    _ = 0 & 0x0;
    return;
}


//# run
main() {
    _ = 0x0 & 0;
    return;
}


//# run
main() {
    _ = 0x0 & 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 & (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) & 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) & (R { x: true });
        return;
    }
}



// operator |
//# run
main() {
    _ = 0u8 | 0u64;
    return;
}


//# run
main() {
    _ = 0u8 | 0u128;
    return;
}


//# run
main() {
    _ = 0u64 | 0u8;
    return;
}


//# run
main() {
    _ = 0u64 | 0u128;
    return;
}


//# run
main() {
    _ = 0u128 | 0u8;
    return;
}


//# run
main() {
    _ = 0u128 | 0u64;
    return;
}


//# run
main() {
    _ = 0 | true;
    return;
}


//# run
main() {
    _ = true | 0;
    return;
}


//# run
main() {
    _ = true | true;
    return;
}


//# run
main() {
    _ = 0 | 0x0;
    return;
}


//# run
main() {
    _ = 0x0 | 0;
    return;
}


//# run
main() {
    _ = 0x0 | 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 | (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) | 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) | (R { x: true });
        return;
    }
}



// operator ^
//# run
main() {
    _ = 0u8 ^ 0u64;
    return;
}


//# run
main() {
    _ = 0u8 ^ 0u128;
    return;
}


//# run
main() {
    _ = 0u64 ^ 0u8;
    return;
}


//# run
main() {
    _ = 0u64 ^ 0u128;
    return;
}


//# run
main() {
    _ = 0u128 ^ 0u8;
    return;
}


//# run
main() {
    _ = 0u128 ^ 0u64;
    return;
}


//# run
main() {
    _ = 0 ^ true;
    return;
}


//# run
main() {
    _ = true ^ 0;
    return;
}


//# run
main() {
    _ = true ^ true;
    return;
}


//# run
main() {
    _ = 0 ^ 0x0;
    return;
}


//# run
main() {
    _ = 0x0 ^ 0;
    return;
}


//# run
main() {
    _ = 0x0 ^ 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 ^ (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) ^ 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) ^ (R { x: true });
        return;
    }
}



// operator ==
//# run
main() {
    _ = 0u8 == 0u64;
    return;
}


//# run
main() {
    _ = 0u8 == 0u128;
    return;
}


//# run
main() {
    _ = 0u64 == 0u8;
    return;
}


//# run
main() {
    _ = 0u64 == 0u128;
    return;
}


//# run
main() {
    _ = 0u128 == 0u8;
    return;
}


//# run
main() {
    _ = 0u128 == 0u64;
    return;
}


//# run
main() {
    _ = 0 == true;
    return;
}


//# run
main() {
    _ = true == 0;
    return;
}


//# run
main() {
    _ = 0 == 0x0;
    return;
}


//# run
main() {
    _ = 0x0 == 0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 == (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) == 0;
        return;
    }
}


// operator !=
//# run
main() {
    _ = 0u8 != 0u64;
    return;
}


//# run
main() {
    _ = 0u8 != 0u128;
    return;
}


//# run
main() {
    _ = 0u64 != 0u8;
    return;
}


//# run
main() {
    _ = 0u64 != 0u128;
    return;
}


//# run
main() {
    _ = 0u128 != 0u8;
    return;
}


//# run
main() {
    _ = 0u128 != 0u64;
    return;
}


//# run
main() {
    _ = 0 != true;
    return;
}


//# run
main() {
    _ = true != 0;
    return;
}


//# run
main() {
    _ = 0 != 0x0;
    return;
}


//# run
main() {
    _ = 0x0 != 0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 != (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) != 0;
        return;
    }
}



// operator <
//# run
main() {
    _ = 0u8 < 0u64;
    return;
}


//# run
main() {
    _ = 0u8 < 0u128;
    return;
}


//# run
main() {
    _ = 0u64 < 0u8;
    return;
}


//# run
main() {
    _ = 0u64 < 0u128;
    return;
}


//# run
main() {
    _ = 0u128 < 0u8;
    return;
}


//# run
main() {
    _ = 0u128 < 0u64;
    return;
}


//# run
main() {
    _ = 0 < true;
    return;
}


//# run
main() {
    _ = true < 0;
    return;
}


//# run
main() {
    _ = 0 < 0x0;
    return;
}


//# run
main() {
    _ = 0x0 < 0;
    return;
}


// operator >
//# run
main() {
    _ = 0u8 > 0u64;
    return;
}


//# run
main() {
    _ = 0u8 > 0u128;
    return;
}


//# run
main() {
    _ = 0u64 > 0u8;
    return;
}


//# run
main() {
    _ = 0u64 > 0u128;
    return;
}


//# run
main() {
    _ = 0u128 > 0u8;
    return;
}


//# run
main() {
    _ = 0u128 > 0u64;
    return;
}


//# run
main() {
    _ = 0 > true;
    return;
}


//# run
main() {
    _ = true > 0;
    return;
}


//# run
main() {
    _ = 0 > 0x0;
    return;
}


//# run
main() {
    _ = 0x0 > 0;
    return;
}


// operator <=
//# run
main() {
    _ = 0u8 <= 0u64;
    return;
}


//# run
main() {
    _ = 0u8 <= 0u128;
    return;
}


//# run
main() {
    _ = 0u64 <= 0u8;
    return;
}


//# run
main() {
    _ = 0u64 <= 0u128;
    return;
}


//# run
main() {
    _ = 0u128 <= 0u8;
    return;
}


//# run
main() {
    _ = 0u128 <= 0u64;
    return;
}


//# run
main() {
    _ = 0 <= true;
    return;
}


//# run
main() {
    _ = true <= 0;
    return;
}


//# run
main() {
    _ = 0 <= 0x0;
    return;
}


//# run
main() {
    _ = 0x0 <= 0;
    return;
}


// operator >=
//# run
main() {
    _ = 0u8 >= 0u64;
    return;
}


//# run
main() {
    _ = 0u8 >= 0u128;
    return;
}


//# run
main() {
    _ = 0u64 >= 0u8;
    return;
}


//# run
main() {
    _ = 0u64 >= 0u128;
    return;
}


//# run
main() {
    _ = 0u128 >= 0u8;
    return;
}


//# run
main() {
    _ = 0u128 >= 0u64;
    return;
}


//# run
main() {
    _ = 0 >= true;
    return;
}


//# run
main() {
    _ = true >= 0;
    return;
}


//# run
main() {
    _ = 0 >= 0x0;
    return;
}


//# run
main() {
    _ = 0x0 >= 0;
    return;
}


// operator <<
//# run
main() {
    _ = 0 << true;
    return;
}


//# run
main() {
    _ = 0 << 0x0;
    return;
}


//# run
main() {
    _ = 0 << 0u64;
    return;
}


//# run
main() {
    _ = 0 << 0u128;
    return;
}


//# run
main() {
    _ = true << 0u8;
    return;
}


//# run
main() {
    _ = true << true;
    return;
}


//# run
main() {
    _ = 0x0 << 0u8;
    return;
}


//# run
main() {
    _ = 0x0 << 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 << (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) << 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) << (R { x: true });
        return;
    }
}



// operator >>
//# run
main() {
    _ = 0 >> true;
    return;
}


//# run
main() {
    _ = 0 >> 0x0;
    return;
}


//# run
main() {
    _ = 0 >> 0u64;
    return;
}


//# run
main() {
    _ = 0 >> 0u128;
    return;
}


//# run
main() {
    _ = true >> 0u8;
    return;
}


//# run
main() {
    _ = true >> true;
    return;
}


//# run
main() {
    _ = 0x0 >> 0u8;
    return;
}


//# run
main() {
    _ = 0x0 >> 0x0;
    return;
}


//# publish
module 0x42.M {
    struct R { x: bool }
    f() {
        _ = 0 >> (R { x: true });
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    g() {
        _ = (R { x: true }) >> 0;
        return;
    }
}

//# publish
module 0x42.M {
    struct R { x: bool }
    h() {
        _ = (R { x: true }) >> (R { x: true });
        return;
    }
}
