//# publish
module 0x42.Token {
    struct T{value: u64}
    public new(m: u64): Self.T {
        return T{value: copy(m)};
    }
    public destroy(t: Self.T) {
        let value: u64;
        T {value} = move(t);
        return;
    }

    public read_value(this: &Self.T): u64 {
        let val: &u64;
        val = &copy(this).T::value;
        // type mismatch, cannot make imm to mut
        Self.bump_value(move(this));
        return *move(val);
    }

    public bump_value(this: &mut Self.T) {
        let val: &mut u64;
        let x: u64;
        val = &mut move(this).T::value;
        x = *copy(val) + 1;
        *move(val) = copy(x);
        return;
    }
}
