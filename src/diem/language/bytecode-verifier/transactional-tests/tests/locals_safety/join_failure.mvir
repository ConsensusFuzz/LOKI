//# publish
module 0x1.M {
    struct R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        // invalid move loc
        R{ f: f } = move(r);
        return;
    }
}

//# publish
module 0x1.M {
    struct R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        // resurce unused
        return;
    }
}

//# publish
module 0x1.M {
    struct R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        // invalid, still possibly a resource in r
        r = R{ f: false };
        return;
    }
}

//# publish
module 0x1.M {
    struct R has copy, drop { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        // invalid copy, r might not have a value
        R{ f: f } = copy(r);
        return;
    }
}

//# publish
module 0x1.M {
    struct R { f:bool }
    t0() {
        let r: Self.R;
        let ref: &Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        // cannot borrow, might not have a value
        ref = &r;
        return;
    }
}
