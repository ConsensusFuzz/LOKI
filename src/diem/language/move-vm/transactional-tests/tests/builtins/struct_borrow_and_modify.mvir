//# publish
module 0x1.M {
    struct Y has store { x: u64 }
    struct R has key { x: bool, y: Self.Y }

    public publish(s: &signer) {
        move_to<R>(move(s), R { x: false, y: Y { x: 0 } });
        return;
    }

    public modify_x(addr: address) acquires R {
        *&mut borrow_global_mut<R>(move(addr)).R::x = true;
        return;
    }

    public verify_x(addr: address) acquires R {
        assert(*&borrow_global<R>(move(addr)).R::x == true, 1000);
        return;
    }

    public modify_y_x(addr: address) acquires R {
        *&mut ((&mut borrow_global_mut<R>(move(addr)).R::y)).Y::x = 42;
        return;
    }

    public verify_y_x(addr: address) acquires R {
        assert(*&(&borrow_global<R>(move(addr)).R::y).Y::x == 42, 1001);
        return;
    }
}

//# run --signers 0x1
import 0x1.M;

main(s: signer) {
    M.publish(&s);
    return;
}


//# run --signers 0x1
import 0x1.M;
import 0x1.Signer;

main(s: signer) {
    M.modify_x(Signer.address_of(&s));
    return;
}


//# run --signers 0x1
import 0x1.M;
import 0x1.Signer;

main(s: signer) {
    M.verify_x(Signer.address_of(&s));
    return;
}


//# run --signers 0x1
import 0x1.M;
import 0x1.Signer;

main(s: signer) {
    M.modify_y_x(Signer.address_of(&s));
    return;
}

//# run --signers 0x1
import 0x1.M;
import 0x1.Signer;

main(s: signer) {
    M.verify_y_x(Signer.address_of(&s));
    return;
}
