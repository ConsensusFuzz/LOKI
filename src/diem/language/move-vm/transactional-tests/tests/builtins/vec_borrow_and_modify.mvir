//# publish
module 0x1.M {
    import 0x1.Vector;

    struct R has key { v: vector<u64> }

    public publish(s: &signer) {
        let v: vector<u64>;
        v = Vector.empty<u64>();
        Vector.push_back<u64>(&mut v, 100);
        Vector.push_back<u64>(&mut v, 200);
        move_to<R>(move(s), R { v: move(v) });
        return;
    }

    public borrow_and_modify(addr: address) acquires R {
        *Vector.borrow_mut<u64>(&mut borrow_global_mut<R>(move(addr)).R::v, 0) = 300;
        return;
    }

    public verify_effects(addr: address) acquires R {
        assert(*Vector.borrow<u64>(&borrow_global<R>(move(addr)).R::v, 0) == 300, 1000);
        return;
    }
}

//# run --signers 0x1
import 0x1.M;

main(s: signer) {
    M.publish(&s);
    return;
}

//# run --signers 0x1
import 0x1.M;
import 0x1.Signer;

main(s: signer) {
    M.borrow_and_modify(Signer.address_of(&s));
    return;
}

//# run --signers 0x1
import 0x1.M;
import 0x1.Signer;

main(s: signer) {
    M.verify_effects(Signer.address_of(&s));
    return;
}
