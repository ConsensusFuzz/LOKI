============ initial translation from Move ================

[variant baseline]
fun Demo::f1($t0|addr: address) {
     var $t1: address
     var $t2: bool
     var $t3: u8
     var $t4: address
     var $t5: &mut Demo::S1<bool>
     var $t6: &mut u8
     var $t7: address
     var $t8: bool
     var $t9: u8
     var $t10: address
     var $t11: &mut Demo::S1<u64>
     var $t12: &mut u8
  0: $t1 := copy($t0)
  1: $t2 := exists<Demo::S1<bool>>($t1)
  2: if ($t2) goto 5 else goto 3
  3: label L1
  4: goto 12
  5: label L0
  6: $t3 := 0
  7: $t4 := copy($t0)
  8: $t5 := borrow_global<Demo::S1<bool>>($t4)
  9: $t6 := borrow_field<Demo::S1<bool>>.v($t5)
 10: write_ref($t6, $t3)
 11: goto 12
 12: label L2
 13: $t7 := copy($t0)
 14: $t8 := exists<Demo::S1<u64>>($t7)
 15: if ($t8) goto 18 else goto 16
 16: label L4
 17: goto 25
 18: label L3
 19: $t9 := 0
 20: $t10 := copy($t0)
 21: $t11 := borrow_global<Demo::S1<u64>>($t10)
 22: $t12 := borrow_field<Demo::S1<u64>>.v($t11)
 23: write_ref($t12, $t9)
 24: goto 25
 25: label L5
 26: return ()
}

============ after pipeline `global_invariant_analysis` ================

[variant verification]
fun Demo::f1($t0|addr: address) {
     var $t1: bool
     var $t2: u8
     var $t3: &mut Demo::S1<bool>
     var $t4: num
     var $t5: &mut u8
     var $t6: bool
     var $t7: u8
     var $t8: &mut Demo::S1<u64>
     var $t9: &mut u8
  0: $t1 := exists<Demo::S1<bool>>($t0)
  1: if ($t1) goto 4 else goto 2
  2: label L1
  3: goto 11
  4: label L0
  5: $t2 := 0
  6: $t3 := borrow_global<Demo::S1<bool>>($t0) on_abort goto 26 with $t4
  7: $t5 := borrow_field<Demo::S1<bool>>.v($t3)
  8: write_ref($t5, $t2)
  9: write_back[Reference($t3).v (u8)]($t5)
 10: write_back[Demo::S1<bool>@]($t3)
 11: label L2
 12: $t6 := exists<Demo::S1<u64>>($t0)
 13: if ($t6) goto 16 else goto 14
 14: label L4
 15: goto 23
 16: label L3
 17: $t7 := 0
 18: $t8 := borrow_global<Demo::S1<u64>>($t0) on_abort goto 26 with $t4
 19: $t9 := borrow_field<Demo::S1<u64>>.v($t8)
 20: write_ref($t9, $t7)
 21: write_back[Reference($t8).v (u8)]($t9)
 22: write_back[Demo::S1<u64>@]($t8)
 23: label L5
 24: label L6
 25: return ()
 26: label L7
 27: abort($t4)
}


********* Result of global invariant instrumentation *********

Demo::f1: [
  entrypoint {
    assume @0 = [
      <> -> [
        <bool, #0>
        <u64, #1>
      ]
    ]
  }
  0: $t1 := exists<Demo::S1<bool>>($t0) {}
  10: write_back[Demo::S1<bool>@]($t3) {
    assert @0 = [
      <> -> [
        <bool, #0>
      ]
    ]
  }
  12: $t6 := exists<Demo::S1<u64>>($t0) {}
  22: write_back[Demo::S1<u64>@]($t8) {
    assert @0 = [
      <> -> [
        <u64, #1>
      ]
    ]
  }
  exitpoint {}
]

********* Global invariants by ID *********

@0 => invariant<T1, T2>
            (exists<S1<T1>>(@0x2) && exists<S2<T2>>(@0x2))
                ==> global<S1<T1>>(@0x2).v == 0;
