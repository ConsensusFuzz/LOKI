{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Move",
    "scopeName": "source.move",
    "comment": "Included patterns are listed in descending order of matching precedence. In general, each element of the grammar is given one or two names: if necessary, a 'meta' name that describes the element in terms of this grammar file, and a non-'meta', conventional TextMate grammar name, which informs tools such as VS Code on how to color the element. If the conventional TextMate name describes the matched token perfectly, the meta name is obviated.",
    "patterns": [
        { "include": "#line-comment" },
        { "include": "#block-comment" },
        { "include": "#has-abilities" },
        { "include": "#type-address" },
        { "include": "#keyword" },
        { "include": "#type" },
        { "include": "#function" },
        { "include": "#value" },
        { "include": "#identifier" },
        { "include": "#punctuation" }
    ],
    "repository": {
        "line-comment": {
            "comment": "Single-line comments such as `// ...` and `/// ...`.",
            "patterns": [
                {
                    "name": "meta.comment.line.documentation.move comment.block.documentation.move",
                    "comment": "A single-line comment of the form `/// ...`. Move considers this to be a documentation comment. TextMate's naming conventions don't include single-line documentation comments, so this is named 'comment.block.documentation' instead.",
                    "begin": "(///)",
                    "beginCaptures": { "1": { "name": "meta.punctuation.slash-slash-slash.move" } },
                    "end": "(\u000a)$",
                    "endCaptures": { "1": { "name": "meta.punctuation.line-feed.move" } },
                    "patterns": [{ "include": "#comment-ambiguous-character" }]
                },
                {
                    "name": "comment.line.move",
                    "comment": "A single-line comment of the form `// ...`.",
                    "begin": "(//)",
                    "beginCaptures": { "1": { "name": "meta.punctuation.slash-slash.move" } },
                    "end": "(\u000a)$",
                    "endCaptures": { "1": { "name": "meta.punctuation.line-feed.move" } },
                    "patterns": [{ "include": "#comment-ambiguous-character" }]
                }
            ]
        },
        "block-comment": {
            "comment": "Block comments such as `/* ... */` and `/** ... */`. These need special handling because they can be nested, creating a stack of block of comments that are closed by `*/` in LIFO order.",
            "patterns": [
                {
                    "name": "comment.block.documentation.move",
                    "comment": "A block comment of the form `/** ... */`. Move considers this to be a documentation comment.",
                    "begin": "/\\*\\*(?!/)",
                    "end": "\\*/",
                    "patterns": [
                        { "include": "#comment-ambiguous-character" },
                        { "include": "#block-comment" }
                    ]
                },
                {
                    "name": "comment.block.move",
                    "comment": "A block comment of the form `/* ... */`.",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        { "include": "#comment-ambiguous-character" },
                        { "include": "#block-comment" }
                    ]
                }
            ]
        },
        "comment-ambiguous-character": {
            "comment": "Characters that may be considered confusing when used in comments.",
            "patterns": [
                {
                    "name": "meta.comment.ambiguous-character.isolated-carriage-return.move invalid.illegal.move",
                    "match": "[\r][^\n]"
                },
                {
                    "name": "meta.comment.ambiguous-character.whitespace.move invalid.illegal.move",
                    "comment": "Unicode code points that represent esoteric white space characters. Most of these come from the 'White_Space' property list from https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt.",
                    "match": "(?:\u000b|\u000c|\u0085|\u00a0|\u1680|\u180e|[\u2000-\u200d]|\u2028|\u2029|\u202f|\u205f|\u2060|\u3000|\ufeff)"
                },
                {
                    "name": "meta.comment.ambiguous-character.asterisk-lookalike.move invalid.illegal.move",
                    "comment": "Unicode code points that represent characters that appear similar to an asterisk '*', which Move uses to delimit comments.",
                    "match": "(?:\u066d|\u204e|\u2217|\u26b9|\u2731)"
                },
                {
                    "name": "meta.comment.ambiguous-character.slash-lookalike.move invalid.illegal.move",
                    "comment": "Unicode code points that represent characters that appear similar to a forward slash '/', which Move uses to delimit comments.",
                    "match": "(?:\u01c0|\u0338|\u2044|\u2215|\u2e4a)"
                }
            ]
        },
        "has-abilities": {
            "comment": "`copy` is an operator in Move, as well as a struct ability. To disambiguate, preferentially match abilities that appear after the `has` keyword.",
            "begin": "\\b(has)\\b",
            "beginCaptures": { "1": { "name": "keyword.other.move" } },
            "end": "(?:(\\{)|(;))",
            "endCaptures": {
                "1": { "name": "meta.punctuation.left-brace.move" },
                "2": { "name": "meta.punctuation.semicolon.move" }
            },
            "patterns": [
                { "include": "#line-comment" },
                { "include": "#block-comment" },
                { "include": "#ability" }
            ]
        },
        "type-address": {
            "name": "meta.type-address.move",
            "comment": "`address` is both a keyword (`address 0x1 { ... }`) and a type (`a: &address`). Make a simple attempt to disambiguate, by matching the most common usages of the type. This is a best-effort and is easily foiled with block comments such as `a: /**/ address`.",
            "match": "(\\:)\\s*(&)?(address)\\b",
            "captures": {
                "1": { "name": "meta.punctuation.colon.move" },
                "2": { "name": "meta.punctuation.ampersand.move" },
                "3": { "name": "meta.type.builtin.address.move entity.name.type.move" }
            }
        },
        "keyword": {
            "comment": "Keywords such as 'if' or 'let'.",
            "patterns": [
                {
                    "name": "keyword.control.move",
                    "match": "\\b(?:abort|break|continue|else|if|loop|return|while)\\b"
                },
                {
                    "name": "keyword.operator.move",
                    "match": "\\b(?:copy|move)\\b"
                },
                {
                    "name": "keyword.other.move",
                    "match": "\\b(?:acquires|as|friend|has|invariant|Self|spec|use)\\b"
                },
                {
                    "name": "keyword.other.move.specification",
                    "match": "\\b(?:aborts_if|aborts_with|apply|assert|assume|axiom|decreases|emits|ensures|global|include|local|modifies|pragma|requires|schema|succeeds_if|to|update|with)\\b"
                },
                {
                    "name": "storage.type.move",
                    "match": "\\b(address|const|fun|let|module|script|struct)\\b"
                },
                {
                    "name": "storage.modifier.move",
                    "match": "\\b(native|public|mut)\\b"
                }
            ]
        },
        "type": {
            "comment": "A type name, such as `u128` or `&mut 0x2::M::S<u8>`.",
            "patterns": [
                {
                    "name": "meta.type.builtin.number.move entity.name.type.move",
                    "match": "\\bu(?:8|64|128)\\b"
                },
                {
                    "name": "meta.type.builtin.bool.move entity.name.type.move",
                    "match": "\\bbool\\b"
                },
                {
                    "name": "meta.type.builtin.address.move entity.name.type.move",
                    "match": "\\baddress\\b"
                },
                {
                    "name": "meta.type.builtin.signer.move entity.name.type.move",
                    "match": "\\bsigner\\b"
                },
                {
                    "name": "meta.type.builtin.vector.move",
                    "begin": "(vector)(<)",
                    "beginCaptures": {
                        "1": { "name": "entity.name.type.move" },
                        "2": { "name": "meta.punctuation.left-angle-bracket.move" }
                    },
                    "end": "(>)",
                    "endCaptures": {
                        "1": { "name": "meta.punctuation.right-angle-bracket.move" }
                    },
                    "patterns": [
                        { "include": "#line-comment" },
                        { "include": "#block-comment" },
                        { "include": "#type" },
                        { "include": "#identifier" }
                    ]
                }
            ]
        },
        "function": {
            "comment": "We assume an identifier that does not begin with a capital letter, eventually followed by an open parenthesis `(`, is a function (no distinction is made here between function call expressions and function declarations). This means that parameterized attributes such as `#[expected_failure(abort_code = 1)]` are classified as functions, but that doesn't seem so bad.",
            "patterns": [
                {
                    "comment": "A function followed by a type list, for example `spec_none<Element>()`.",
                    "begin": "([_a-z][_a-zA-Z0-9]*)(<)",
                    "beginCaptures": {
                        "1": { "name": "meta.function.move entity.name.function.move" },
                        "2": { "name": "meta.punctuation.less.move" }
                    },
                    "end": "(>)(\\()",
                    "endCaptures": {
                        "1": { "name": "meta.punctuation.greater.move" },
                        "2": { "name": "meta.punctuation.left-parenthesis.move" }
                    },
                    "patterns": [
                        { "include": "#line-comment" },
                        { "include": "#block-comment" },
                        { "include": "#type" },
                        { "include": "#ability" },
                        { "include": "#identifier" }
                    ]
                },
                {
                    "comment": "A function immediately followed by an open parenthesis, for example `len(vec)`.",
                    "match": "([_a-z][_a-zA-Z0-9]*)(\\()",
                    "captures": {
                        "1": { "name": "meta.function.move entity.name.function.move" },
                        "2": { "name": "meta.punctuation.left-parenthesis.move" }
                    }
                }
            ]
        },
        "value": {
            "name": "meta.value.move",
            "patterns": [
                {
                    "comment": "An address value with a hexadecimal constant, for example `@0x1bEeF`.",
                    "name": "meta.value.address.hexadecimal.move variable.other.move",
                    "match": "@0x[a-fA-F0-9]+(u(8|64|128))?"
                },
                {
                    "comment": "An address value with a non-hexadecimal numeric constant, for example `@42u8`.",
                    "name": "meta.value.address.decimal.move variable.other.move",
                    "match": "@[0-9]+(u(8|64|128))?"
                },
                {
                    "comment": "An address value with an identifier, for example `@addr`.",
                    "name": "meta.value.address.identifier.move variable.other.move",
                    "match": "@[_a-zA-Z][_a-zA-Z0-9]*"
                },
                {
                    "comment": "A boolean constant: `true` or `false`.",
                    "name": "meta.value.boolean.move constant.language.boolean.move",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "comment": "A hexadecimal constant number, for example `0x11Eeu64`.",
                    "name": "meta.value.number.hexadecimal.move constant.numeric.move",
                    "match": "\\b0x[a-fA-F0-9]+(u(8|64|128))?\\b"
                },
                {
                    "comment": "A non-hexadecimal constant number, for example `42u128`.",
                    "name": "meta.value.number.decimal.move constant.numeric.move",
                    "match": "\\b[0-9]+(u(8|64|128))?\\b"
                },
                {
                    "comment": "A byte string, for example b\"hel\tlo\".",
                    "name": "meta.value.bytestring.move string.quoted.double.move",
                    "begin": "(b\")",
                    "beginCaptures": { "1": { "name": "meta.value.bytestring.prefix.move" } },
                    "end": "(\")",
                    "endCaptures": { "1": { "name": "meta.value.bytestring.suffix.move" } },
                    "patterns": [{
                        "comment": "An escaped character within a string.",
                        "name": "constant.character.escape.move",
                        "match": "\\\\."
                    }]
                },
                {
                    "comment": "A hexadecimal string, for example x\"01dF\".",
                    "name": "meta.value.hexadecimal-string.move string.quoted.double.move",
                    "begin": "(x\")",
                    "beginCaptures": { "1": { "name": "meta.value.hexadecimal-string.prefix.move" } },
                    "end": "(\")",
                    "endCaptures": { "1": { "name": "meta.value.hexadecimal-string.suffix.move" } },
                    "patterns": [{
                        "comment": "Invalid hexadecimal character within a string.",
                        "name": "meta.value.hexadecimal-string.invalid.move invalid.illegal.move",
                        "match": "[^a-fA-F0-9]"
                    }]
                }
            ]
        },
        "identifier": {
            "patterns": [
                {
                    "name": "meta.identifier.all-capitals.move constant.other.move",
                    "comment": "We assume any identifier composed of two or more capital letters is a constant.",
                    "match": "\\b[A-Z][_A-Z0-9]+\\b"
                },
                {
                    "name": "meta.identifier.camel-case-type-list.move",
                    "comment": "We assume any identifier beginning with a capital letter is a type. This pattern matches such a type followed by angle brackets `<...>`.",
                    "begin": "\\b([A-Z][_a-zA-Z0-9]*)(<)",
                    "beginCaptures": {
                        "1": { "name": "entity.name.type.move" },
                        "2": { "name": "meta.punctuation.less.move" }
                    },
                    "end": "(>)",
                    "endCaptures": { "1": { "name": "meta.punctuation.greater.move" } },
                    "patterns": [
                        { "include": "#type" },
                        { "include": "#ability" },
                        { "include": "#identifier" }
                    ]
                },
                {
                    "name": "meta.identifier.camel-case.move entity.name.type.move",
                    "comment": "We assume any identifier beginning with a capital letter is a type.",
                    "match": "\\b[A-Z][_a-zA-Z0-9]*\\b"
                },
                {
                    "name": "meta.identifier.type-list.move",
                    "comment": "This pattern matches an identifier followed by angle brackets `<...>`.",
                    "begin": "\\b([_a-zA-Z][_a-zA-Z0-9]*)(<)",
                    "beginCaptures": {
                        "1": { "name": "variable.other.move" },
                        "2": { "name": "meta.punctuation.less.move" }
                    },
                    "end": "(>)",
                    "endCaptures": { "1": { "name": "meta.punctuation.greater.move" } },
                    "patterns": [
                        { "include": "#type" },
                        { "include": "#ability" },
                        { "include": "#identifier" }
                    ]
                },
                {
                    "name": "meta.identifier.move variable.other.move",
                    "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
                }
            ]
        },
        "ability": {
            "name": "meta.ability.move entity.name.type.move",
            "comment": "This pattern matches any of the built-in type abilities.",
            "match": "\\b(copy|drop|key|store)\\b"
        },
        "punctuation": {
            "comment": "Patterns used to capture punctuators such as `{` or `::` as individual tokens.",
            "patterns": [
                { "name": "meta.punctuation.exclaim-equal.move", "match": "!=" },
                { "name": "meta.punctuation.exclaim.move", "match": "!" },
                { "name": "meta.punctuation.percent.move", "match": "%" },
                { "name": "meta.punctuation.ampersand-ampersand.move", "match": "&&" },
                { "name": "meta.punctuation.ampersand.move", "match": "&" },
                { "name": "meta.punctuation.left-parenthesis.move", "match": "\\(" },
                { "name": "meta.punctuation.right-parenthesis.move", "match": "\\)" },
                { "name": "meta.punctuation.hash-left-bracket.move", "match": "#\\[" },
                { "name": "meta.punctuation.left-bracket.move", "match": "\\[" },
                { "name": "meta.punctuation.right-bracket.move", "match": "\\]" },
                { "name": "meta.punctuation.asterisk.move", "match": "\\*" },
                { "name": "meta.punctuation.plus.move", "match": "\\+" },
                { "name": "meta.punctuation.comma.move", "match": "," },
                { "name": "meta.punctuation.minus.move", "match": "-" },
                { "name": "meta.punctuation.period-period.move", "match": "\\.\\." },
                { "name": "meta.punctuation.period.move", "match": "\\." },
                { "name": "meta.punctuation.slash.move", "match": "/" },
                { "name": "meta.punctuation.colon-colon.move", "match": "::" },
                { "name": "meta.punctuation.colon.move", "match": ":" },
                { "name": "meta.punctuation.semicolon.move", "match": ";" },
                { "name": "meta.punctuation.less-equal-equal-greater.move", "match": "<==>" },
                { "name": "meta.punctuation.equal-equal-greater.move", "match": "==>" },
                { "name": "meta.punctuation.equal-equal.move", "match": "==" },
                { "name": "meta.punctuation.less-less.move", "match": "<<" },
                { "name": "meta.punctuation.less-equal.move", "match": "<=" },
                { "name": "meta.punctuation.greater-greater.move", "match": ">>" },
                { "name": "meta.punctuation.greater-equal.move", "match": ">=" },
                { "name": "meta.punctuation.equal.move", "match": "=" },
                { "name": "meta.punctuation.less.move", "match": "<" },
                { "name": "meta.punctuation.greater.move", "match": ">" },
                { "name": "meta.punctuation.caret.move", "match": "\\^" },
                { "name": "meta.punctuation.pipe-pipe.move", "match": "\\|\\|" },
                { "name": "meta.punctuation.pipe.move", "match": "\\|" },
                { "name": "meta.punctuation.left-brace.move", "match": "\\{" },
                { "name": "meta.punctuation.right-brace.move", "match": "\\}" }
            ]
        }
    }
}
