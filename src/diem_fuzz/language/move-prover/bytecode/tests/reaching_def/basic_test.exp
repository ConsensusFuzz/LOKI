============ initial translation from Move ================

[variant baseline]
fun ReachingDefTest::basic($t0|a: u64, $t1|b: u64): u64 {
     var $t2|x: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
  0: $t3 := copy($t0)
  1: $t4 := copy($t1)
  2: $t5 := +($t3, $t4)
  3: $t6 := copy($t0)
  4: $t7 := /($t5, $t6)
  5: $t2 := $t7
  6: $t8 := copy($t2)
  7: $t9 := 1
  8: $t10 := +($t8, $t9)
  9: return $t10
}


[variant baseline]
fun ReachingDefTest::create_resource($t0|sender: &signer) {
     var $t1|r: ReachingDefTest::R
     var $t2: &signer
     var $t3: u64
     var $t4: bool
     var $t5: ReachingDefTest::R
  0: $t2 := move($t0)
  1: $t3 := 1
  2: $t4 := false
  3: $t5 := pack ReachingDefTest::R($t3, $t4)
  4: move_to<ReachingDefTest::R>($t5, $t2)
  5: return ()
}

============ after pipeline `reaching_def` ================

[variant baseline]
fun ReachingDefTest::basic($t0|a: u64, $t1|b: u64): u64 {
     var $t2|x: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
  0: $t3 := copy($t0)
  1: $t4 := copy($t1)
  2: $t5 := +($t0, $t1)
  3: $t6 := copy($t0)
  4: $t7 := /($t5, $t0)
  5: $t2 := $t7
  6: $t8 := copy($t7)
  7: $t9 := 1
  8: $t10 := +($t7, $t9)
  9: return $t10
}


[variant baseline]
fun ReachingDefTest::create_resource($t0|sender: signer) {
     var $t1|r: ReachingDefTest::R
     var $t2: signer
     var $t3: u64
     var $t4: bool
     var $t5: ReachingDefTest::R
  0: $t2 := move($t0)
  1: $t3 := 1
  2: $t4 := false
  3: $t5 := pack ReachingDefTest::R($t3, $t4)
  4: move_to<ReachingDefTest::R>($t5, $t0)
  5: return ()
}
