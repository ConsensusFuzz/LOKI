// Tests checking incorrect struct declarations using phantom parameters
// in illegal positions.

module M1 {
    // A phantom parameter cannot be used as the type of a field
    struct S1<phantom T> {
        a: T
    }
}

//! new-transaction

module M2 {
    // The parameter of vector is non-phantom and a phantom parameter shouldn't be allowed in that position
    struct S2<phantom T> {
        a: vector<T>
    }
}

//! new-transaction

module M3 {
    // A phantom parameter cannot be used as the argument to a non-phantom parameter
    struct S1<T> { f: bool }
    struct S2<phantom T> {
        a: Self.S1<T>
    }
}

//! new-transaction

module M4 {
    // More complicated test where the phantom position violation is inside another
    // type argument.
    struct S1<T> { a: T}
    struct S2<T> { a : T }
    struct S3<phantom T> {
        a: Self.S1<Self.S2<T>>
    }
}

//! new-transaction

module M5 {
    // Mixing phantom and non-phantom parameters
    struct S<T1, phantom T2, T3> {
        a: T2
    }
}

//! new-transaction

module M6 {
    // Phantom parameters should satisfy constraints
    struct S1<phantom T: copy> { a: bool }
    struct S2<phantom T> {
        a: Self.S1<T>
    }
}
