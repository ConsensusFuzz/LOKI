module M1 {
    // Not using a phantom parameter at all is ok.
    struct S1<phantom T> {
        a: u64
    }

    // Phantom parameters can be used in phantom position.
    struct S2<phantom T> {
        a: Self.S1<T>,
        b: vector<Self.S1<T>>
    }

    // It's ok to not use a non-phantom parameter (backward-compatibility).
    struct S3<T> {
        a: u64
    }

    // Mixing phantom and non-phantom parameters
    struct S4<phantom T1, T2, phantom T3, T4> {
        a: T2,
        b: T4
    }
}

//! new-transaction

module M2 {
    import {{default}}.M1;

    // Phantom position across modules
    struct S<phantom T> {
        a: M1.S2<M1.S1<T>>
    }
}

//! new-transaction

module M3 {
    // Phantom parameters should be allowed to be declared with constraints.

    struct S1<phantom T: copy> {
        a: u64
    }

    struct S2<phantom T: copy + drop + store> {
        a: Self.S1<T>
    }
}
