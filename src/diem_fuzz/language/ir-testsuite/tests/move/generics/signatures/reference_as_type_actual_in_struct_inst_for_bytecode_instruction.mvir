module M {
    import 0x1.Signer;

    struct Some<T> has key { item: T }

    foo(account: &signer) acquires Some {
        move_from<Some<&u64>>(Signer.address_of(move(account)));
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    import 0x1.Signer;

    struct Some<T> has key { item: T }

    foo(account: &signer) {
        let v: Self.Some<u64>;
        move_to<Some<&u64>>(copy(account), move(v));
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    import 0x1.Signer;

    struct Some<T> has key { item: T }

    foo(account: &signer) {
        exists<Some<&u64>>(Signer.address_of(move(account)));
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    import 0x1.Signer;

    struct Some<T> has key { item: T }

    foo(account: &signer) {
        borrow_global<Some<&u64>>(Signer.address_of(move(account)));
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    import 0x1.Signer;

    struct Some<T> has key { item: T }

    foo(account: &signer) {
        borrow_global_mut<Some<&u64>>(Signer.address_of(move(account)));
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    struct Some<T> { item: T }

    foo() {
        let x: u64;
        let y: &u64;
        let v: Self.Some<u64>;

        y = &x;
        v = Some<&u64> { item: move(y) };
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    struct Some<T> { item: T }

    foo() {
        let x: &u64;
        let v: Self.Some<u64>;

        Some<&u64> { item: x } = move(v);
        return;
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    struct S<T> { v: T }

    foo(s: Self.S<&u64>): u64 {
        return *(*(&(&s).v));
    }
}
// check: INVALID_SIGNATURE_TOKEN

//! new-transaction
module M {
    struct S<T> { v: T }

    foo(s: Self.S<&u64>): u64 {
        return *(*(&mut (&mut s).v));
    }
}
// check: INVALID_SIGNATURE_TOKEN
