version: 2.1

commands:
  install_depencies:
    description: Setup Ubuntu dependencies
    parameters:
      packages:
        type: string
        default: ""
    steps:
      - run:
          name: Setup dependencies
          command: |
            apt-get update
            apt-get install -y git snapd curl build-essential clang cmake libssl-dev zlib1g-dev openssh-client << parameters.packages >>
            curl -LO https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-x86_64.sh
            rm /usr/bin/cmake && bash cmake-3.20.0-linux-x86_64.sh --prefix=/usr/bin/ --skip-license --include-subdir && rm cmake-3.20.0-linux-x86_64.sh
            ln -s /usr/bin/cmake-3.20.0-linux-x86_64/bin/cmake /usr/bin/cmake
            echo 'export CCACHE_DIR=/ccache' >> $BASH_ENV
  compile:
    description: Compile
    parameters:
      options:
        type: string
        default: ""
      compiler:
        type: string
        default: ""
    steps:
      - run:
          name: Compile
          no_output_timeout: 40m
          command: |
            mkdir -p build && cd build
            << parameters.compiler >> cmake << parameters.options >> ..
            make -j2

executors:
  ubuntu-build-env:
    docker:
      - image: fiscoorg/fiscobcos:build-env
  ubuntu-bionic:
    docker:
      - image: ubuntu:18.04
  ubuntu-xenial:
    docker:
      - image: ubuntu:16.04

jobs:
  build_static_test:
    working_directory: /FISCO-BCOS
    executor: ubuntu-build-env
    steps:
      - install_depencies:
          packages: "ccache lcov patch flex bison libgmp-dev"
      - checkout
      - restore_cache:
          keys:
            - deps-cache-v4-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}
            - deps-cache-v4-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-
            - deps-cache-v4-{{ .Environment.CIRCLE_JOB }}-
      - compile:
          options: "-DBUILD_STATIC=ON -DTESTS=ON -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug"
      - save_cache:
          key: deps-cache-v4-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - deps
            - /ccache
      - run:
          name: Unit test
          command: |
            cd build
            CTEST_OUTPUT_ON_FAILURE=TRUE make test
            rm -rf /FISCO-BCOS/deps
      - persist_to_workspace:
          root: /
          paths:
            - FISCO-BCOS/lib*
            - FISCO-BCOS/build/*
            - FISCO-BCOS/test/*
            - FISCO-BCOS/tools/*
            - FISCO-BCOS/.codecov.yml

  generate_coverage:
    working_directory: /FISCO-BCOS
    executor: ubuntu-build-env
    steps:
      - install_depencies:
          packages: "lcov"
      - attach_workspace:
          at: /
      - run:
          name: Upload Coverage
          command: |
            bash <(curl -s https://codecov.io/bash) -C $CIRCLE_SHA1 -f "!*/deps/*" > /dev/null

  integration_test:
    working_directory: /FISCO-BCOS
    executor: ubuntu-build-env
    steps:
      - install_depencies:
          packages: "python-pip"
      - attach_workspace:
          at: /
      - run:
          name: Run integration test
          command: |
            pip install requests
            bash tools/build_chain.sh -l "127.0.0.1:4" -e build/bin/fisco-bcos -v $(/FISCO-BCOS/build/bin/fisco-bcos -v | grep -o "2\.[0-9]\.[0-9]")
            bash nodes/127.0.0.1/start_all.sh
            python tools/ci/ci_check.py
            bash nodes/127.0.0.1/stop_all.sh

  build_test_guomi:
    working_directory: /FISCO-BCOS-GM
    docker:
      - image: centos:7
    steps:
      - run:
          name: Setup dependencies
          command: |
            yum install -y epel-release centos-release-scl
            yum install -y git make gcc-c++ cmake3 openssl-devel openssl ccache flex patch bison gmp-static devtoolset-7
            echo 'export CCACHE_DIR=/ccache' >> $BASH_ENV

      - checkout
      - restore_cache:
          keys:
            - deps-v2-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}
            - deps-v2-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-
            - deps-v2-{{ .Environment.CIRCLE_JOB }}-
      - run:
          name: Compile
          no_output_timeout: 40m
          command: |
            source /opt/rh/devtoolset-7/enable
            yum list devtoolset-7\*
            mkdir -p build && cd build
            cmake3 -DTESTS=ON -DTOOL=ON -DDEMO=ON ..
            make -j2
      - save_cache:
          key: deps-v2-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - deps
            - /ccache
      - run:
          name: Unit test
          command: |
            cd build
            ./bin/test-fisco-bcos --random -- --testpath=../test/data/
      - run:
          name: Run GM nodes
          command: |
            cd build
            ../tools/build_chain.sh -l "127.0.0.1:4" -e bin/fisco-bcos -g && cd nodes/127.0.0.1 && bash start_all.sh && sleep 2 && [[ $(ps -ef| grep fisco-bcos |grep -v grep | wc -l) == 4 ]]

  build_static:
    working_directory: /FISCO-BCOS
    executor: ubuntu-build-env
    steps:
      - install_depencies:
          packages: "ccache libgmp-dev flex bison patch"
      - checkout
      - restore_cache:
          keys:
            - deps-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}
      - compile:
          options: "-DBUILD_STATIC=ON"
          compiler: "CC=/usr/bin/clang CXX=/usr/bin/clang++"
      - save_cache:
          key: deps-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - deps
            - /ccache
      - run:
          name: Upload binary
          command: |
            cp tools/build_chain.sh build/bin/
            cd build/bin
            tar -zcf fisco-bcos.tar.gz fisco-bcos build_chain.sh
            strip fisco-bcos
            tar -zcf fisco-bcos-mini.tar.gz fisco-bcos build_chain.sh
      - store_artifacts:
          path: /FISCO-BCOS/build/bin/fisco-bcos.tar.gz
          destination: fisco-bcos.tar.gz
      - store_artifacts:
          path: /FISCO-BCOS/build/bin/fisco-bcos-mini.tar.gz
          destination: fisco-bcos-mini.tar.gz

  deploy_static:
    working_directory: /FISCO-BCOS
    executor: ubuntu-build-env
    steps:
      - install_depencies:
          packages: "ca-certificates golang-go libgmp-dev flex bison patch"
      - checkout
      - compile:
          options: "-DTOOL=ON -DBUILD_STATIC=ON -DCMAKE_BUILD_TYPE=Release"
          compiler: "CC=/usr/bin/clang CXX=/usr/bin/clang++"
      - run:
          name: Strip
          command: |
            cd build/bin
            tar -zcf fisco-bcos-withSymbols.tar.gz fisco-bcos
            strip fisco-bcos
            tar -zcf fisco-bcos.tar.gz fisco-bcos
            strip fisco-sync
            tar -zcf fisco-sync.tar.gz fisco-sync
      - run:
          name: Upload to GitHub Release
          command: |
            go get github.com/tcnksm/ghr
            ~/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -replace ${CIRCLE_TAG} /FISCO-BCOS/tools/build_chain.sh
            ~/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -replace ${CIRCLE_TAG} /FISCO-BCOS/build/bin/fisco-bcos.tar.gz
            ~/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -replace ${CIRCLE_TAG} /FISCO-BCOS/build/bin/fisco-sync.tar.gz
            ~/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -replace ${CIRCLE_TAG} /FISCO-BCOS/build/bin/fisco-bcos-withSymbols.tar.gz

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_static_test:
          filters:
            branches:
              only:
                - /^pull.*/
            tags:
              ignore: /.*/
      - generate_coverage:
          requires:
            - build_static_test
          filters:
            branches:
              only:
                - /^pull.*/
            tags:
              ignore: /.*/
      - integration_test:
          requires:
            - build_static_test
          filters:
            branches:
              only:
                - /^pull.*/
            tags:
              ignore: /.*/
      - build_test_guomi:
          filters:
            branches:
              only:
                - /^pull.*/
                - /^release.*/
            tags:
              ignore: /.*/
      - build_static:
          filters:
            branches:
              ignore: /^pull.*/
            tags:
              ignore: /.*/
  deploy:
    jobs:
      - deploy_static:
          filters:
            tags:
              only:
                - /v2.*/
            branches:
              ignore: /.*/
